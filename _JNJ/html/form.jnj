{#- jinja template: form.jnj -#}
{#
## Copyright (C) 2010 Mag. Christian Tanzer All rights reserved
## Glasauergasse 32, A--1130 Wien, Austria. tanzer@swing.co.at
## ****************************************************************************
## This template is part of the package JNJ.
##
## This template is free software: you can redistribute it and/or modify
## it under the terms of the GNU Affero General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This template is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Affero General Public License for more details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this template. If not, see <http://www.gnu.org/licenses/>.
## ****************************************************************************
##
##++
## Name
##    html/form.jnj
##
## Purpose
##    Provide macros for rendering html forms
##
## Revision Dates
##    12-Jan-2010 (CT) Creation
##    13-Jan-2010 (CT) Creation continued
##    14-Jan-2010 (CT) Creation continued..
##    15-Jan-2010 (MG) `login_inline`: `name` attributes added to fields
##    15-Jan-2010 (MG) Macro `object`: redering of errors not bound to a
##                     field added
##    17-Jan-2010 (MG) Login default url changed to `login.html`
##    30-Jan-2010 (MG) `field_groups`;  added rendering of form fields
##     2-Feb-2010 (MG) `inline` macro changed to prepare for the JS code
##    02-Feb-2010 (MG) `field_groups`: rendering of form-hidden fields
##                     removed again
##    02-Feb-2010 (MG) `inline_table` added
##     3-Feb-2010 (CT) `many-2-many-range` made `hidden`
##     3-Feb-2010 (MG) `fgs_tr_*` added
##     3-Feb-2010 (MG) `inline_table` add the name of the inline as css-class
##                     (needed to setup the completion)
##     5-Feb-2010 (MG) `inline_table*` macros added, `fgs_*` macros renamed
##     8-Feb-2010 (MG) `aid_div_seq` added
##    ««revision-date»»···
##--
#}

{%- import html_version as X -%}

{%- macro aid_div_seq (pfo, aid) -%}
    {%- set fo = aid.forms [0] -%}
    {%- for fg in fo.field_groups %}
      {{ GTW.call_macro (fg.widget.inline_table_td, fo, fg)}}
    {% endfor -%}
{%- endmacro -%} {#- aid_div_seq -#}

{%- macro fg_div_seq (fo, fg) -%}
  {%- for fi in fg.visible_fields %}
    <div class="Field Field-{{ fi.name }}" title="{{ fi.description|safe }}"
    >
      {%- if loop.first %}
        {%- for h in fg.hidden_fields %}
          {{ GTW.call_macro (h.widget, fo, h) }}
        {% endfor -%}
      {% endif %}
      <span class="Field-Help">{{ fi.description|safe }}</span>
      {{ _field_label (fo, fi) }}
      {{ GTW.call_macro (fi.widget, fo, fi) }}
      {{ _field_error (fo, fi) }}
    </div>
  {% endfor -%}
{%- endmacro -%} {#- fg_div_seq -#}

{%- macro fg_tr (fo, fg) -%}
  <table class="field_group-Horizontal">
    <thead>
      {{ fg_tr_head (fo, fg) }}
    </thead>
    <tbody>
      {{ fg_tr_body (fo, fg) }}
    </tbody>
  </table>
  <div class="field_group-Horizontal-Help">
    {%- for fi in fg.visible_fields %}
      {%- if fi.description %}
        <p class="Field-Help Field-Help-{{ fi.name }}">
          {{ fi.description|safe }}
        </p>
      {% endif -%}
    {% endfor -%}
  </div>
{%- endmacro -%} {#- fg_tr -#}

{%- macro fg_tr_body (fo, fg) -%}
    <tr class="field_group {{ fg.css_class }} {{ kwargs.pop ("class", "") }}"
      {% if fg.legend %}title="{{ fg.legend }}"{% endif -%}
    >
      {%- for fi in fg.visible_fields %}
        <td class="Field Field-{{ fi.name }}" title="{{ fi.description|safe }}">
          {%- if loop.first %}
            {%- for h in fg.hidden_fields %}
              {{ GTW.call_macro (h.widget.inline, fo, h) }}
            {% endfor -%}
          {% endif %}
          {{ GTW.call_macro (fi.widget.inline, fo, fi) }}
        </td>
      {% endfor -%}
    </tr>
{%- endmacro -%} {#- fg_tr_body -#}

{%- macro fg_tr_head (fo, fg) -%}
    <tr>
      {%- for fi in fg.visible_fields %}
        <th title="{{ fi.description|safe }}">
          {{ _field_label (fo, fi) }}
        </th>
      {% endfor -%}
    </tr>
{%- endmacro -%} {#- fg_tr_head -#}

{%- macro inline_table_aid_td (fo, fg) -%}
{%- set ifo =  fg.forms [0] -%}
{%- for fg in ifo.field_groups %}
  {{ GTW.call_macro (fg.widget.inline_table_td, ifo, fg)}}
{% endfor  %}
{%- endmacro -%} {#- inline_table_aid_td -#}

{%- macro inline_table_aid_th (fo, fg) -%}
{%- set ifo =  fg.forms [0] -%}
{%- for fg in ifo.field_groups %}
  {{ GTW.call_macro (fg.widget.inline_table_th, ifo, fg)}}
{% endfor  %}
{%- endmacro -%} {#- inline_table_aid_th -#}

{%- macro inline_table_td (fo, fg) -%}
      {%- for fi in fg.visible_fields %}
        <td class="Field Field-{{ fi.name }}" title="{{ fi.help_text|safe }}">
          {%- if loop.first %}
            {%- for h in fg.hidden_fields %}
              {{ GTW.call_macro (h.widget, fo, h) }}
            {% endfor -%}
          {% endif %}
          {{ GTW.call_macro (fi.widget.inline, fo, fi) }}
        </td>
      {% endfor -%}
{%- endmacro -%} {#- inline_table_td -#}

{%- macro inline_table_th (fo, fg) -%}
      {%- for fi in fg.visible_fields %}
        <th title="{{ fi.help_text|safe }}">{{ _field_label (fo, fi) }}</th>
      {% endfor -%}
{%- endmacro -%} {#- inline_table_th -#}

{%- macro inline_table_tr_body (fo, fgs) -%}
    <tr class="field_group {{ fo.css_class }} {{ kwargs.pop ("class", "") }}"
      {% if fo.legend %}title="{{ fo.legend }}"{% endif -%}
    >
    {%- for fg in fgs %}
        {{ GTW.call_macro (fg.widget.inline_table_td, fo, fg) }}
    {% endfor -%}
    {%- if fo.get_errors () %}
      <td>{{ _field_error (fo, None) }}</td>
    {% endif -%}
    </tr>
{%- endmacro -%} {#- inline_table_tr_body -#}

{%- macro inline_table_tr_head (fo, fgs) -%}
    <tr>
    {%- for fg in fgs %}
      {{ GTW.call_macro (fg.widget.inline_table_th, fo, fg) }}
    {% endfor -%}
    </tr>
{%- endmacro -%} {#- inline_table_tr_head -#}

{%- macro field_groups (fo) -%}
    {%- for fg in fo.field_groups %}
      {%- if fo.get_errors () %}
        {{ _field_error (fo, None) }}
      {% endif -%}
      <div class="Formset {{ fg.css_class }}"
       {% if fg.legend %}title="{{ fg.legend }}"{% endif -%}
      >
     {{ GTW.call_macro (fg.widget, fo, fg) }}
      </div>
    {% endfor -%}
{%- endmacro -%} {#- field_groups -#}

{%- macro form
        ( action        = ""
        , cancel_kw     = {}
        , method        = "post"
        , next_form_kw  = {}
        , reset_kw      = {}
        , submit_kw     = {}
        )
-%}
  <form action="{{ action }}" method="{{ method }}"{{ kwargs|xmlattr }}>
    {{ caller () }}
    {%- if next_form_kw %}
      {{ X.input.hidden (** next_form_kw) }}
    {% endif -%}
    {%- if submit_kw %}
      {{ X.input.submit (** submit_kw) }}
    {% endif -%}
    {%- if reset_kw %}
      {{ X.input.reset  (** reset_kw) }}
    {% endif -%}
    {%- if cancel_kw %}
      {%- set ckw = cancel_kw %}
      <a href="{{ ckw.href }}"
         title="{{ ckw.title or GTW._T ('Discard all changes and leave form') }}"
         class="button">
        {{ ckw.name or GTW._T ("Cancel") }}
      </a>
    {% endif -%}
  </form>
{%- endmacro -%} {#- form -#}

{%- macro inline_table (form, inline) -%}
  {%- set proto = inline.prototype_form -%}
  <fieldset class="m2m-inline-form-table {{ inline.name }}">
    {%- if inline.legend %}
      <legend title="{{ inline.name|capitalize }}">{{ inline.legend }}</legend>
    {% endif -%}
    {{- X.input.hidden
        ( class = " many-2-many-range"
        , value = "%s:%s:%s"|format
            (inline.min_required, inline.form_count, inline.max_count)
        , name  = "%s"|format(inline.range_field_name)
        , id    = "F_%s"|format (inline.range_field_name)
        )
    -}}
  <table class="field_group-Horizontal">
    <thead>
      {{ GTW.call_macro ( proto.widget.inline_table_tr_head
                        , proto
                        , proto.field_groups
                        ) }}
    </thead>
    <tbody>
      {{ GTW.call_macro
          ( proto.widget.inline_table_tr_body
          , proto, proto.field_groups
          , class = "m2m-inline-instance m2m-prototype"
          )
      }}
      {%- for iform in inline.forms %}
        {{ GTW.call_macro
          ( iform.widget.inline_table_tr_body
          , iform
          , iform.field_groups
          , class="m2m-inline-instance"
          ) }}
      {% endfor -%}
    </tbody>
  </table>
  </fieldset>
{%- endmacro -%} {#- inline_table -#}

{%- macro login_inline (un_tag = "Username", pw_tag = "Password", action = "/login.html") -%}
  {%- set login_caller = kwargs.pop ("caller", None) -%}
  {%- set next         = kwargs.pop ("next",   "") -%}
  {% call form (action = action, ** kwargs) -%}
    {%- if login_caller -%}{{- login_caller () -}}{%- endif -%}
    <ul>
      <li><label for="F_username">{{ GTW._T (un_tag) }}</label></li>
      <li>
        {{ X.input.text
            ( id            = "F_username"
            , name          = "username"
            , maxlength     = "30"
            , placeholder   = GTW._T ("Please enter your user-name")
            )
        }}
      </li>
      <li><label for="F_password">{{ GTW._T (pw_tag) }}</label></li>
      <li>
        {{ X.input.password
            ( id            = "F_password"
            , name          = "password"
            , placeholder   = GTW._T ("Please enter your password")
            )
        }}
      </li>
      <li>
        {{ X.input.submit (value = GTW._T ('Login')) }}
        {{ X.input.hidden (name  = "next", value = next) }}
      </li>
    </ul>
  {% endcall %} {# form #}
{%- endmacro -%} {#- login_inline -#}

{%- macro object (fo) -%}
  {#- Create a form for a form-object `fo` -#}
  {%- set object_caller = kwargs.pop ("caller", None) -%}
  {% call form
      ( action    = fo.action
      , class     = fo.css_class
      , cancel_kw = dict
          ( href  = fo.cancel_href
          , title = GTW._T ("Discard all changes and leave form")
          )
      , reset_kw  = dict
          ( title = GTW._T ("Discard all changes")
          , value = GTW._T ("Reset")
          )
      , submit_kw = dict (value = GTW._T ("Submit"))
      , ** kwargs
      )
 -%}
   {{ field_groups (fo) }}
  {% endcall %} {# form #}
{%- endmacro -%} {#- object -#}

{%- macro _field_label (fo, fi) -%}
  <label for="F_{{ fo.get_id (fi) }}">{{ GTW._T (fi.ui_name) }}</label>
{%- endmacro -%} {#- _field_label -#}

{%- macro _field_error (fo, fi) -%}
  {%- set fe = fo.get_errors (fi) -%}
  {{ GTW.call_macro (fe.widget, fe) }}
{%- endmacro -%} {#- _field_error -#}

{#- __END__ jinja template: form.jnj -#}
