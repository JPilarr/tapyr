{#- jinja template: form.jnj -#}
{#
## Copyright (C) 2010-2013 Mag. Christian Tanzer All rights reserved
## Glasauergasse 32, A--1130 Wien, Austria. tanzer@swing.co.at
## ****************************************************************************
## This template is part of the package JNJ.
##
## This template is free software: you can redistribute it and/or modify
## it under the terms of the GNU Affero General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This template is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Affero General Public License for more details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this template. If not, see <http://www.gnu.org/licenses/>.
## ****************************************************************************
##
##++
## Name
##    html/form.jnj
##
## Purpose
##    Provide macros for rendering html forms
##
## Revision Dates
##    12-Jan-2010 (CT) Creation
##    13-Jan-2010 (CT) Creation continued
##    14-Jan-2010 (CT) Creation continued..
##    15-Jan-2010 (MG) `login_inline`: `name` attributes added to fields
##    15-Jan-2010 (MG) Macro `object`: redering of errors not bound to a
##                     field added
##    17-Jan-2010 (MG) Login default url changed to `login.html`
##    30-Jan-2010 (MG) `field_groups`;  added rendering of form fields
##     2-Feb-2010 (MG) `inline` macro changed to prepare for the JS code
##    02-Feb-2010 (MG) `field_groups`: rendering of form-hidden fields
##                     removed again
##    02-Feb-2010 (MG) `inline_table` added
##     3-Feb-2010 (CT) `many-2-many-range` made `hidden`
##     3-Feb-2010 (MG) `fgs_tr_*` added
##     3-Feb-2010 (MG) `inline_table` add the name of the inline as css-class
##                     (needed to setup the completion)
##     5-Feb-2010 (MG) `inline_table*` macros added, `fgs_*` macros renamed
##     8-Feb-2010 (MG) `aid_div_seq` added
##    10-Feb-2010 (MG) Display of `aig` no field errors added
##    10-Feb-2010 (MG) `aid_div_seq` fixed
##    21-Feb-2010 (CT) `logout_inline` added, `login_inline` changed
##    22-Feb-2010 (CT) Macro `object` changed to take `cancel_href` from
##                     `kwargs` or `fo.kw`
##                     (and use `cancel_kw = {}` for empty `cancel_href`)
##    23-Feb-2010 (CT) `form` changed to accept more than 1 `submit_kw`
##    24-Feb-2010 (CT) Missing calls to `GTW._T` added
##    24-Feb-2010 (CT) `aid_div_seq` changed to honor `legend`
##    26-Feb-2010 (MG) Inline forms changed
##    27-Feb-2010 (MG) Handling of hidden fields changed
##    28-Feb-2010 (MG) Handling of hidden fields fixed
##    28-Feb-2010 (MG) `inline_table_aid_td` changed to write the hidden fields
##                     of the parent form if this is the first field group
##    28-Feb-2010 (MG) `aid_div_seq` fixed to handling hidden fields
##    10-Mar-2010 (MG) `aid_div_seq` fixed to handle hidden fields correct
##    10-Mar-2010 (MG) `inline_table_td`: fixed title attribute of td's
##    11-Mar-2010 (MG) `_sep_th/_sep_td` macros added
##    30-Apr-2010 (MG) Form table rendering changed completely, AID rendering
##                     changed
##     5-May-2010 (MG) `field_help` added
##     5-May-2010 (MG) Field help for div-seq and table unified
##    26-May-2010 (MG) Error handling changed
##    19-Aug-2010 (CT) `form` changed to use `X.input.submit` instead of
##                     `<a>` for `Cancel`
##    19-Aug-2010 (CT) `title` added to all Save/reset/cancel buttons
##    12-Nov-2010 (CT) `form` changed to include `div.buttons` only if necessary
##    26-Jan-2012 (CT) Use `request.path_x` for `next`, if available
##    16-Feb-2012 (CT) Add `class="button"` to `login_inline`, `logout_inline`
##    16-Aug-2012 (MG) Add support for errors to `login_inline`
##    16-Aug-2012 (MG) Add `password_change` form
##    17-Aug-2012 (MG) Add customization options to `login_inline` and
##                    `logout_inline`
##     9-Oct-2012 (CT) Use `request.referrer` for `next`
##     9-Oct-2012 (CT) Change `password_change` to not set `next` to
##                     `page.abs_href`
##     9-Oct-2012 (CT) Use class `Error-Message` for errors
##     9-Oct-2012 (CT) Add `username` to `login_inline`
##     8-Jan-2013 (CT) Add `cert_auth_path` to `logout_inline`
##    15-Jan-2013 (CT) Add `cc_href` to `login_inline`
##    16-Jan-2013 (CT) Remove `class` from `<a>` for `cc_href`
##    ««revision-date»»···
##--
#}

{%- import (html_version or "html/5.jnj") as X -%}

{%- macro aid_div_seq (pfo, aid, widget_type = None) -%}
  {%- set fo = aid.form -%}
  {%- onion aid.legend %}
    {%- head %}
      <fieldset class="inline-form {{ aid.form_cls.form_path_css }}">
        <legend title="{{ GTW._T (aid.name)|capitalize|safe }}">
          {{ GTW._T (aid.legend)|safe }}
        </legend>
    {%- else %}
      <div class="inline-form {{ aid.name }}">
    {%- body %}
      {%- for h in pfo.hidden_fields %}
        {{ GTW.call_macro (h.widget, pfo, h) }}
      {% endfor -%}
      {%- for fg in fo.field_groups %}
        {{ GTW.call_macro (fg.widget, fo, fg)}}
      {% endfor -%}
    {%- tail %}
      </fieldset>
    {%- else %}
      </div>
  {%- endonion %}
{%- endmacro -%} {#- aid_div_seq -#}

{%- macro fg_div_seq (fo, fg, widget_type = None) -%}
  {%- for fi in fo.fields_of_field_group (fg) %}
    {%- set desc = GTW._T (fi.description)|safe %}
    <div class="Field Field-{{ fi.name }}" title="{{ desc }}">
      {%- for hf in fo.hidden_fields %}
        {{ GTW.call_macro (hf.widget, fo, hf) }}
      {% endfor -%}
      {%- if desc %}<span class="Field-Help">{{ desc }}</span>{% endif -%}
      {{ GTW.call_macro (fi.widget.field_label, fo, fi) }}
      {{ GTW.call_macro (fi.widget, fo, fi) }}
      {{ GTW.call_macro (fi.widget.field_error, fo, fi) }}
    </div>
  {% endfor -%}
{%- endmacro -%} {#- fg_div_seq -#}

{%- macro field_groups (fo, widget_type = None) -%}
    {%- for fg in fo.field_groups %}
      {%- if fo.get_errors () %}
        {{ GTW.call_macro (fo.widget.non_field_errors, fo, None) }}
      {% endif -%}
      <div class="Formset {{ fg.css_class }}"
       {% if fg.legend %}title="{{ GTW._T (fg.legend)|safe }}"{% endif -%}
      >
     {{ GTW.call_macro (fg.widget, fo, fg, widget_type = widget_type) }}
      </div>
    {% endfor -%}
{%- endmacro -%} {#- field_groups -#}

{%- macro form
        ( action        = ""
        , cancel_kw     = {}
        , method        = "post"
        , next_form_kw  = {}
        , reset_kw      = {}
        , submit_kws    = []
        )
-%}
  <form action="{{ action }}" method="{{ method }}"{{ kwargs|xmlattr }}>
    {{ caller () }}
    {%- if next_form_kw %}
      {{ X.input.hidden (** next_form_kw) }}
    {% endif -%}
    {%- if submit_kws or reset_kw or cancel_kw %}
      <div class="buttons">
        {%- for submit_kw in submit_kws %}
          {%- if submit_kw %}
            {{ X.input.submit (** submit_kw) }}
          {% endif -%}
        {% endfor -%}
        {%- if reset_kw %}
          {{ X.input.reset  (** reset_kw) }}
        {% endif -%}
        {%- if cancel_kw %}
          {%- set ckw = cancel_kw %}
          {{ X.input.submit
              ( name  = "cancel"
              , title = ckw.title or GTW._T ("Discard all changes and leave form")
              , value = ckw.name  or GTW._T ("Cancel")
              )
          }}
        {% endif -%}
      </div>
    {% endif -%}
  </form>
{%- endmacro -%} {#- form -#}

{%- macro form_tr (fo, widget_type, class = "") -%}
  <tr{%- if class %} class="{{class}}"{% endif -%}>
    {%- for fg in fo.field_groups %}
      {%- if fo.get_errors () %}
        {{ GTW.call_macro (fo.widget.non_field_errors, fo, None) }}
      {% endif -%}
     {{ GTW.call_macro (fg.widget, fo, fg, widget_type = widget_type) }}
    {% endfor -%}
  </tr>
{%- endmacro -%} {#- form_tr -#}

{%- macro fg_tr_head (fo, fg, widget_type = None) -%}
  {%- for fi in fo.fields_of_field_group (fg) %}
    {% call GTW.call_macro (fi.widget.th_onion, fo, fi, widget_type) %}
      {{ GTW.call_macro (fi.widget.field_label, fo, fi) }}
    {% endcall %}
  {% endfor -%}
{%- endmacro -%} {#- fg_tr_head -#}

{%- macro fg_tr_body (fo, fg, widget_type = None) -%}
  {%- if fo.hidden_fields %}
    <td class="ui-helper-hidden">
    {%- for h in fo.hidden_fields %}
      {{ GTW.call_macro (h.widget, fo, h) }}
    {% endfor -%}
    </td>
  {% endif -%}
  {%- for fi in fo.fields_of_field_group (fg) %}
    {% call GTW.call_macro (fi.widget.td_onion, fo, fi, widget_type) %}
      {{ GTW.call_macro (fi.widget.inline, fo, fi) }}
    {% endcall %}
  {% endfor -%}
{%- endmacro -%} {#- fg_tr_body -#}

{%- macro th_onion (fo, fi, widget_type) -%}
  <th>{{ caller() }}</th>
{%- endmacro -%} {#- th_onion -#}

{%- macro td_onion (fo, fi, widget_type) -%}
  <td>{{ caller() }}</td>
{%- endmacro -%} {#- td_onion -#}

{%- macro th_onion_aid (fo, fi, widget_type, caller = None) -%}
  {%- for fg in fi.form.field_groups %}
    {{ fg_tr_head (fi.form, fg, "fg_tr_head") }}
  {% endfor -%}
{%- endmacro -%} {#- th_onion_aid -#}

{%- macro td_onion_aid (fo, fi, widget_type, caller = None) -%}
  {%- for fg in fi.form.field_groups %}
    {{ fg_tr_body (fi.form, fg, "fg_tr_body") }}
  {% endfor -%}
{%- endmacro -%} {#- td_onion_aid -#}

{%- macro fg_as_table (fo, fg, widget_type = None, css_class = "") -%}
  <table class="field_group-Horizontal">
    <thead>
      <tr>{{ fg_tr_head (fo, fg) }}</tr>
    </thead>
    <tbody>
      <tr{%- if css_class %} class="{{ css_class }}"{% endif -%}>
        {{- fg_tr_body (fo, fg) -}}
      </tr>
    </tbody>
  </table>
  <div class="field_group-Horizontal-Help-Table">
    {%- for fi in fg.fields %}
      {%- set desc = GTW._T (fi.description)|safe %}
      {%- if fi.description %}
        <span class="Field-Help Field-Help-{{ fi.name }}">{{ desc }}</span>
      {% endif -%}
    {% endfor -%}
  </div>
{%- endmacro -%} {#- fg_as_table -#}

{%- macro inlines_as_table (form, inline) -%}
  {%- set proto = inline.prototype_form -%}
  {%- if inline.forms %}
    {%- set fform = inline.forms [0] -%}
  {%- else %}
    {%- set fform = proto -%}
  {% endif -%}
  <fieldset class="inline-form-table {{ inline.form_cls.form_name }}">
    {%- if inline.legend %}
      <legend title="{{ inline.name|capitalize }}">{{ GTW._T (inline.legend)|safe }}</legend>
    {% endif -%}
    {{- X.input.hidden
        ( class = " many-2-many-range"
        , value = "%s:%s:%s"|format
            (inline.min_required, inline.form_count, inline.max_count)
        , name  = inline.range_field_name
        , id    = "F_%s"|format (inline.range_field_name)
        )
    -}}
  <table class="field_group-Horizontal">
    <thead>{{- form_tr (fform, "fg_tr_head")-}}</thead>
    <tbody>
      {{- form_tr
            (proto, "fg_tr_body", class = "inline-instance inline-prototype")
      -}}
      {%- for iform in inline.forms %}
        {{- form_tr ( iform, "fg_tr_body", class = "inline-instance") -}}
      {% endfor -%}
    </tbody>
  </table>
  </fieldset>
{%- endmacro -%} {#- inlines_as_table -#}

{%- macro display_errors (errors, field_name) -%}
      {%- for err in errors.get (field_name, ()) %}
        <li class="Error-Message">
          {{ err }}
        </li>
      {% endfor -%}
{%- endmacro -%} {#- display_errors -#}

{%- macro login_inline (page, request, un_tag = "Username", pw_tag = "Password", allow_register = False) -%}
  {%- set Auth     = page.SC.Auth -%}
  {%- set cc_href  = page.cc_href %}
  {%- set l_caller = kwargs.pop ("caller",   None) -%}
  {%- set action   = kwargs.pop ("action",   Auth.href_login) -%}
  {%- set next     = kwargs.pop ("next",     request.path_x or request.path) -%}
  {%- set errors   = kwargs.pop ("errors",   {}) -%}
  {%- set username = kwargs.pop ("username", None) -%}
  {%- set allow_new_pass = kwargs.pop ("allow_new_password", True) -%}
  {%- if (not next) or next.split ("?") [0].endswith (Auth.href_login) -%}
    {%- set next = page.top.abs_href -%}
  {%- endif -%}
  {% call form (action = action, ** kwargs) -%}
    {%- if l_caller -%}{{- l_caller () -}}{%- endif -%}
    <ul>
      {{- display_errors (errors, None) -}}
      {%- if cc_href %}
        <li >
          <a href="{{ cc_href }}" class="button"
            title="{{ GTW._T ("Login with a previously created client certificate") }}"
          >{{ GTW._T ("Certificate login") }}</a>
        </li>
      {% endif -%}
      <li><label for="F_username">{{ GTW._T (un_tag) }}</label></li>
      <li>
        {{ X.input.text
            ( id            = "F_username"
            , name          = "username"
            , maxlength     = "30"
            , value         = username
            )
        }}
      </li>
      {{- display_errors (errors, "username") -}}
      <li><label for="F_password">{{ GTW._T (pw_tag) }}</label></li>
      <li>
        {{ X.input.password
            ( id            = "F_password"
            , name          = "password"
            )
        }}
      </li>
      {{- display_errors (errors, "password") -}}
      <li>
        {{ X.input.submit
            ( title = GTW._T ("Log into website or go to account page")
            , value = GTW._T ("Login")
            , name  = "Submit"
            )
        }}
        {{ X.input.hidden (name  = "next", value = next) }}
      </li>
      {%- if allow_new_pass %}
        <li>
          {{ X.input.submit
              ( title = GTW._T ("Get a new password for the username specified")
              , value = GTW._T ("New password")
              , name  = "Reset"
              )
          }}
        </li>
      {% endif -%}
      {%- if allow_register %}
        <li class="nav-link level-0">
          <a href="{{ Auth.href_register }}" class="button"
            title="{{ GTW._T ("Register a new account") }}"
          >{{ GTW._T ("Register") }}</a>
        </li>
      {% endif -%}
    </ul>
  {% endcall %} {# form #}
{%- endmacro -%} {#- login_inline -#}

{%- macro logout_inline (page, request) -%}
  {%- set Auth     = page.SC.Auth %}
  {%- set l_caller = kwargs.pop ("caller", None) -%}
  {%- set action   = kwargs.pop ("action", Auth.href_logout) -%}
  {%- set next     = kwargs.pop ("next",   request.referrer) -%}
  {%- set allow_change_email = kwargs.pop ("allow_change_email", True) %}
  {%- set allow_register     = kwargs.pop ("allow_register", True) %}
  {%- set cert_auth_path     = page.cert_auth_path %}
  {%- if (not next) or next.split ("?") [0].endswith (Auth.href_logout) -%}
    {%- set next = page.top.abs_href -%}
  {%- endif -%}
  {% call form (action = action, ** kwargs) -%}
    {%- if l_caller -%}{{- l_caller () -}}{%- endif -%}
    <ul>
      <li>
        {{ X.input.submit
            ( title = (GTW._T ("Logout %s") % (request.user.name, ))
            , value = (GTW._T ("Logout %s") %
                (request.user.name.split ("@") [0], ))
            )
        }}
        {{ X.input.hidden (name  = "next", value = next) }}
      </li>
      {%- if allow_change_email %}
        <li>
          <a href="{{ Auth.href_change_email (request.user) }}" class="button"
            title="{{ GTW._T ("Change email of account %s") % request.user.name }}"
          >{{ GTW._T ("Change email") }}</a>
        </li>
      {% endif -%}
      {%- if allow_register %}
        <li>
          <a href="{{ Auth.href_change_pass (request.user) }}" class="button"
            title="{{ GTW._T ("Change password of account %s") % request.user.name }}"
          >{{ GTW._T ("Change password") }}</a>
        </li>
      {% endif -%}
      {%- if cert_auth_path %}
        <li>
          <a href="{{ Auth.href_make_cert (request.user) }}" class="button"
            title="{{ GTW._T ("Make a client certificate for account %s") % request.user.name }}"
          >
            {{- GTW._T ("Make client certificate") -}}
          </a>
        </li>
      {% endif -%}
    </ul>
  {% endcall %} {# form #}
{%- endmacro -%} {#- logout_inline -#}

{%- macro password_change (page, request, action) -%}
  {%- set Auth     = page.SC.Auth -%}
  {%- set l_caller = kwargs.pop ("caller", None) -%}
  {%- set next     = kwargs.pop ("next",   request.path_x or request.path) -%}
  {%- set errors   = kwargs.pop ("errors", {}) -%}
  {%- if (not next) or next.split ("?") [0].endswith (page.abs_href) %}
    {%- set next = page.top.abs_href %}
  {% endif -%}
  {% call form (action = action, ** kwargs) -%}
    {%- if l_caller -%}{{- l_caller () -}}{%- endif -%}
    <ul>
      <li class="account-name">{{ account.name }}</li>
      {{- display_errors (errors, None) -}}

      <li><label for="F_password">{{ GTW._T ("Current Password") }}</label></li>
      <li>{{ X.input.password (id = "F_password", name = "password") }}</li>
      {{- display_errors (errors, "password") -}}

      <li><label for="F_npassword">{{ GTW._T ("New Password") }}</label></li>
      <li>{{ X.input.password (id = "F_npassword", name = "npassword") }}</li>
      {{- display_errors (errors, "npassword") -}}

      <li><label for="F_vpassword">{{ GTW._T ("Repeat Password") }}</label></li>
      <li>{{ X.input.password (id = "F_vpassword", name = "vpassword") }}</li>
      {{- display_errors (errors, "vpassword") -}}

      <li>
        {{ X.input.submit
            ( title = (GTW._T ("Update password"))
            , value = (GTW._T ("Update password"))
            )
        }}
        {{ X.input.hidden (name  = "next",     value = next        ) }}
        {{ X.input.hidden (name  = "username", value = account.name) }}
      </li>
    </ul>
  {% endcall %} {# form #}
{%- endmacro -%} {#- password_change -#}

{%- macro object (fo) -%}
  {#- Create a form for a form-object `fo` -#}
  {%- set object_caller = kwargs.pop ("caller", None) -%}
  {%- set cancel_href   = kwargs.pop ("cancel_href", fo.kw.cancel_href) -%}
  {%- set cancel_kw     = dict
        ( href  = cancel_href
        , title = GTW._T ("Discard all changes and leave form")
        ) if cancel_href else {}
  -%}
  {%- set submit_kws    = kwargs.pop ("submit_kws", None) %}
  {% call form
      ( action     = fo.action
      , class      = fo.css_class
      , cancel_kw  = cancel_kw
      , reset_kw   = dict
          ( title  = GTW._T ("Discard all changes")
          , value  = GTW._T ("Reset")
          )
      , submit_kws = submit_kws or
          [ dict
              ( title = GTW._T ("Send form data to server and leave form")
              , value = GTW._T ("Submit")
              )
          ]
      , ** kwargs
      )
  -%}
    {{ field_groups (fo) }}
    {%- if object_caller %}
      {{ object_caller () }}
    {% endif -%}
  {% endcall %} {# form #}
{%- endmacro -%} {#- object -#}

{%- macro field_error (fo, fi) -%}
  {%- set field, nid = fo.next_erroneous_field (fi) %}
  {%- set fe = fo.get_errors (fi) -%}
  {{ GTW.call_macro (fe.widget, fe, nid) }}
{%- endmacro -%} {#- field_error -#}

{%- macro field_help (fo, fi) -%}
  {%- if fi.description -%}
    <span class="Field-Help">{{ GTW._T (fi.description)|safe }}</span>
  {%- endif -%}
{%- endmacro -%} {#- field_help -#}

{%- macro field_label (fo, fi) -%}
  <label for="F_{{ fo.get_id (fi) }}">{{ GTW._T (fi.ui_name) }}</label>
{%- endmacro -%} {#- field_label -#}

{#- __END__ jinja template: form.jnj -#}
